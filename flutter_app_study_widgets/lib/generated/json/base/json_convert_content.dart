// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_app_study_widgets/model/login_entity.dart';
import 'package:flutter_app_study_widgets/generated/json/login_entity_helper.dart';
import 'package:flutter_app_study_widgets/model/test_model_entity.dart';
import 'package:flutter_app_study_widgets/generated/json/test_model_entity_helper.dart';
import 'package:flutter_app_study_widgets/model/net_code_entity.dart';
import 'package:flutter_app_study_widgets/generated/json/net_code_entity_helper.dart';
import 'package:flutter_app_study_widgets/app_dio_net_request_entity.dart';
import 'package:flutter_app_study_widgets/generated/json/app_dio_net_request_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case LoginEntity:
				return loginEntityFromJson(data as LoginEntity, json) as T;
			case LoginData:
				return loginDataFromJson(data as LoginData, json) as T;
			case TestModelEntity:
				return testModelEntityFromJson(data as TestModelEntity, json) as T;
			case TestModelResult:
				return testModelResultFromJson(data as TestModelResult, json) as T;
			case TestModelResultData:
				return testModelResultDataFromJson(data as TestModelResultData, json) as T;
			case NetCodeEntity:
				return netCodeEntityFromJson(data as NetCodeEntity, json) as T;
			case AppDioNetRequestEntity:
				return appDioNetRequestEntityFromJson(data as AppDioNetRequestEntity, json) as T;
			case AppDioNetRequestResult:
				return appDioNetRequestResultFromJson(data as AppDioNetRequestResult, json) as T;
			case AppDioNetRequestResultData:
				return appDioNetRequestResultDataFromJson(data as AppDioNetRequestResultData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case LoginEntity:
				return loginEntityToJson(data as LoginEntity);
			case LoginData:
				return loginDataToJson(data as LoginData);
			case TestModelEntity:
				return testModelEntityToJson(data as TestModelEntity);
			case TestModelResult:
				return testModelResultToJson(data as TestModelResult);
			case TestModelResultData:
				return testModelResultDataToJson(data as TestModelResultData);
			case NetCodeEntity:
				return netCodeEntityToJson(data as NetCodeEntity);
			case AppDioNetRequestEntity:
				return appDioNetRequestEntityToJson(data as AppDioNetRequestEntity);
			case AppDioNetRequestResult:
				return appDioNetRequestResultToJson(data as AppDioNetRequestResult);
			case AppDioNetRequestResultData:
				return appDioNetRequestResultDataToJson(data as AppDioNetRequestResultData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (LoginEntity).toString()){
			return LoginEntity().fromJson(json);
		}
		if(type == (LoginData).toString()){
			return LoginData().fromJson(json);
		}
		if(type == (TestModelEntity).toString()){
			return TestModelEntity().fromJson(json);
		}
		if(type == (TestModelResult).toString()){
			return TestModelResult().fromJson(json);
		}
		if(type == (TestModelResultData).toString()){
			return TestModelResultData().fromJson(json);
		}
		if(type == (NetCodeEntity).toString()){
			return NetCodeEntity().fromJson(json);
		}
		if(type == (AppDioNetRequestEntity).toString()){
			return AppDioNetRequestEntity().fromJson(json);
		}
		if(type == (AppDioNetRequestResult).toString()){
			return AppDioNetRequestResult().fromJson(json);
		}
		if(type == (AppDioNetRequestResultData).toString()){
			return AppDioNetRequestResultData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((e) => LoginEntity().fromJson(e)).toList() as M;
		}
		if(<LoginData>[] is M){
			return data.map<LoginData>((e) => LoginData().fromJson(e)).toList() as M;
		}
		if(<TestModelEntity>[] is M){
			return data.map<TestModelEntity>((e) => TestModelEntity().fromJson(e)).toList() as M;
		}
		if(<TestModelResult>[] is M){
			return data.map<TestModelResult>((e) => TestModelResult().fromJson(e)).toList() as M;
		}
		if(<TestModelResultData>[] is M){
			return data.map<TestModelResultData>((e) => TestModelResultData().fromJson(e)).toList() as M;
		}
		if(<NetCodeEntity>[] is M){
			return data.map<NetCodeEntity>((e) => NetCodeEntity().fromJson(e)).toList() as M;
		}
		if(<AppDioNetRequestEntity>[] is M){
			return data.map<AppDioNetRequestEntity>((e) => AppDioNetRequestEntity().fromJson(e)).toList() as M;
		}
		if(<AppDioNetRequestResult>[] is M){
			return data.map<AppDioNetRequestResult>((e) => AppDioNetRequestResult().fromJson(e)).toList() as M;
		}
		if(<AppDioNetRequestResultData>[] is M){
			return data.map<AppDioNetRequestResultData>((e) => AppDioNetRequestResultData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}